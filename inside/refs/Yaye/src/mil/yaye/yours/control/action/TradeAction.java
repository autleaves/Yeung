/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package mil.yaye.yours.control.action;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import mil.yaye.yours.dto.AddressDTO;
import mil.yaye.yours.dto.BuyDTO;
import mil.yaye.yours.factory.BeanFactory;
import mil.yaye.yours.service.GuideService;
import mil.yaye.yours.service.PersonnelService;
import mil.yaye.yours.service.TradeService;
import mil.yaye.yours.vo.AddressVO;
import mil.yaye.yours.vo.ProductVO;
import mil.yaye.yours.vo.UserVO;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.MappingDispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

/** 
 * MyEclipse Struts
 * Creation date: 03-26-2009
 * 
 * XDoclet definition:
 * @struts.action input="buy.do" parameter="buy" validate="true"
 */
public class TradeAction extends MappingDispatchAction {
	
	// Fields
	private static Logger logger = Logger.getLogger(TradeAction.class.getName());
	/*
	 * Generated Methods
	 */

//==================================购买商品时所用到的方法=====Begin==============================================
	/**
	 * 当用户点击header部分的'购物车'链接时请求这个方法.
	 */
	@SuppressWarnings("unchecked")
	public ActionForward viewshopcart(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BeanFactory beanFactory = BeanFactory.getInstance(null);
		
		ActionForward forward = mapping.findForward("shopcartlist$");
		if(request.getSession().getAttribute("SHOPCART_SIMPLE_INFO") == null){//当为第一次选择一个商品
			Map<Integer, Integer> shopcart_simple_info = new HashMap<Integer, Integer>(); //一个为商品id,一个为购买数量
			request.getSession(false).setAttribute("SHOPCART_SIMPLE_INFO", shopcart_simple_info);
			return forward;
		}
		if(request.getSession(false).getAttribute("SHOPCART_PARTICULAR") == null){
			List<ProductVO> shopcart_particularVO = new ArrayList<ProductVO>();
			request.getSession().setAttribute("SHOPCART_PARTICULAR", shopcart_particularVO);
		}
		if(request.getSession(false).getAttribute("SHOPCART_MAP") == null){
			Map<String, Object> shopcart_map = new HashMap<String, Object>(); //存放一些基本的属性
			//**********设置shopcart_map中的所有属性的默认值
			shopcart_map.put("IS_USE_BONUSPOINT", false); //默认不使用积分
//			shopcart_map.put("ADDR_KEY", "");	//使用哪一个地址
			shopcart_map.put("USER_ID", ((UserVO)request.getSession(false).getAttribute("USER_BASE_INFO")).getUserId());
			request.getSession(false).setAttribute("SHOPCART_MAP", shopcart_map);
		}
		Map<Integer, Integer> shopcart_simple_info = (Map<Integer, Integer>) request.getSession(false).getAttribute("SHOPCART_SIMPLE_INFO");
		List<ProductVO> shopcart_particular = (List<ProductVO>) request.getSession(false).getAttribute("SHOPCART_PARTICULAR");
		if(shopcart_simple_info.size() == 0){
			return forward;
		}
		GuideService guide_service = (GuideService) beanFactory.getBean("GuideService");
		Set<Integer> idkeyset = shopcart_simple_info.keySet();
		Iterator<ProductVO> iter_prods = shopcart_particular.iterator();
		if(shopcart_particular.size() > 0){
			while(iter_prods.hasNext()){ //先检查存在于List - shopcart_particular中的属性是否在shopcart_simple_info中有对应项
				Integer id = iter_prods.next().getProductId();
				if(!idkeyset.contains(id)){
					iter_prods.remove(); 
					//Iterator中有三个int变量:cursor-下一次next()调用时元素的位置,lastRet-记录上一次游标所在位置，因此它总是比cursor少1,
					//AbstractList包含一个 modCount变量，它的初始值是0，当集合每被修改一次时（调用add，remove等方法），modCount加1。因此，modCount如果不变，表示集合内容未被修改
					//int expectedModCount = modCount  expectedModCount表示期待的modCount值，用来判断在遍历过程中集合是否被修改过
				}
			}
		}
		int i = 0;
		Iterator<Integer> iter_idkeyset = idkeyset.iterator();
		iter_prods = shopcart_particular.iterator();
		while(iter_idkeyset.hasNext())
		{
			Integer id = iter_idkeyset.next();
			boolean flag = false;
			while(iter_prods.hasNext())
			{
				ProductVO productVO = iter_prods.next();
				if(id.intValue() == productVO.getProductId().intValue())
				{
					flag = true;
					break;
				}
			}
			if(!flag)
			{
				ProductVO productVO = guide_service.productDetailGuide(id); //在这里查询得到该件商品的所有信息
				shopcart_particular.add(productVO);
			}
			iter_prods = shopcart_particular.iterator();
		}
		
		return forward;
	}
	
	/**
	 * 返回所有该用户以前所用过的地址,供用户进行选择
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward backAddrs(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		BeanFactory beanFactory = BeanFactory.getInstance(null);
		UserVO userInfo = (UserVO) request.getSession(false).getAttribute("USER_BASE_INFO");
		PersonnelService personnel_service = (PersonnelService) beanFactory.getBean("PersonnelService");
		Map<String, AddressVO> addrMap = personnel_service.getAddrs(userInfo.getUserId());
		Set<String> idset = addrMap.keySet();
		for(String id : idset){
			logger.info("addrMap中的id为:" + id + "#######");
			logger.info("相应addrMap中的AddressVO中的realname为:" + ((AddressVO)addrMap.get(id)).getRealname() + "#######");
		}
		
		request.getSession(false).setAttribute("ADDR_MAP", addrMap);
		
		return mapping.findForward("confirmAddr$");//到达填写地址页面,该页面显示所有该用户以前所用过的地址,供用户进行选择,同时该页面还有一张地址表单,如果用户需要新填写一个地址.
	}
	@SuppressWarnings("unchecked")
	public ActionForward confirmAddr(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		BeanFactory beanFactory = BeanFactory.getInstance(null);
		String addr_selected = request.getParameter("addr"); //页面上有一组name相同的radio,每个的value值是在rebackAddrs.do这个方法中生成的<模式为:ADDR + getAddressId>
		if(addr_selected == null){
			logger.info("addr_selected为null............!!!!!!!!!........");
		}
		logger.info("addr_selected为:" + addr_selected + "##############");
		if(addr_selected.equals("ADDR_NEW")){//当用户选择是新填写一个收货人地址时,
			//return new ActionForward("/addOneAddr.do"); //此为方案一
			//****下为方案二:
			DynaValidatorForm receiveAddrForm = (DynaValidatorForm) form;
			AddressDTO addrDTO = new AddressDTO();
			addrDTO.setAddrname("Addr");
			addrDTO.setRealname(receiveAddrForm.getString("consignee"));
			addrDTO.setCountry(receiveAddrForm.getString("country"));
			addrDTO.setProvince(receiveAddrForm.getString("province"));
			addrDTO.setCity(receiveAddrForm.getString("city"));
			addrDTO.setSelfaddress(receiveAddrForm.getString("selfaddr"));
			addrDTO.setZipcode(receiveAddrForm.getString("zipcode"));
			addrDTO.setZipcode(receiveAddrForm.getString("tel"));
			addrDTO.setZipcode(receiveAddrForm.getString("mobile"));
			
			PersonnelService personnel_service = (PersonnelService) beanFactory.getBean("PersonnelService");
			Integer addrId = personnel_service.addOneAddr(addrDTO, ((UserVO)request.getSession(false).getAttribute("USER_BASE_INFO")).getUserId());
			/*此为途径一:<再一次查询数据库>
			Map<String, AddressVO> addrMap = personnel_service.getAddrs(((UserVO)request.getSession(false).getAttribute("USER_BASE_INFO")).getUserId());
			request.getSession(false).setAttribute("ADDR_MAP", addrMap);*/
			//*此为途径二:<未再查询数据库>
			Map<String, AddressVO> addrMap = new HashMap<String, AddressVO>();
			AddressVO addrVO = new AddressVO();
			try {
				BeanUtils.copyProperties(addrVO, addrDTO);
				addrVO.setAddressId(addrId);
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			}
			addrMap.put("ADDR_" + addrId, addrVO);
			request.getSession(false).setAttribute("ADDR_MAP", addrMap);
			
//			request.getSession(false).setAttribute("ADDR_KEY", "ADDR_" + addrId);
			((Map<String, Object>)request.getSession(false).getAttribute("SHOPCART_MAP")).put("ADDR_KEY", "ADDR_"+addrId);
		}else{
			Map<String, AddressVO> addrMap = (Map<String, AddressVO>) request.getSession(false).getAttribute("ADDR_MAP");
			Set<String> addrKeyset = addrMap.keySet();
			String addrkey = null;
			for(String key : addrKeyset){
				if(key.equals(addr_selected)){
					addrkey = key;
					logger.info("addrkeyset中的key为:" + key);
					break;
				}
			}
			logger.info("addrkey为:" + addrkey + "###########");
			((Map<String, Object>)request.getSession(false).getAttribute("SHOPCART_MAP")).put("ADDR_KEY", addrkey);
		}
		return new ActionForward("/buy/endconfirm.do");
	}
	/**
	 * 生成所有购买需信息
	 */
	@SuppressWarnings("unchecked")
	public ActionForward endConfirm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		BeanFactory beanFactory = BeanFactory.getInstance(null);
		//在这里把存放在session中的所有购买需信息全部返回给用户,生成一个清单,供用户确认
		ActionForward forward = mapping.findForward("orderlist$");
		TradeService trade_service = (TradeService) beanFactory.getBean("TradeService");
		Map<Integer, Integer> shopcart_simple_info = (Map<Integer, Integer>) request.getSession(false).getAttribute("SHOPCART_SIMPLE_INFO");
		List<ProductVO> shopcart_particular = (List<ProductVO>) request.getSession(false).getAttribute("SHOPCART_PARTICULAR");
		Map<String, String> chargelist = trade_service.calcOrder(shopcart_particular, shopcart_simple_info);
		
		request.getSession(false).setAttribute("CHARGE_LIST", chargelist);
		
		return forward;
	}
	
	/**
	 * 当用户确认购买清单无误时,点击页面的确定按钮时就访问这个方法,这时才是真正的购买,往数据库中写入数据.
	 * 购买流程至此结束
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward endBuy(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		BeanFactory beanFactory = BeanFactory.getInstance(null);
		boolean flag = false;
		if(isCancelled(request)){
			
		}else{
			TradeService trade_service = (TradeService) beanFactory.getBean("TradeService");
			Map<String, Object> shopcart_map = (Map<String, Object>) request.getSession(false).getAttribute("SHOPCART_MAP");
			Map<Integer, Integer> shopcart_simple_info = (Map<Integer, Integer>) request.getSession(false).getAttribute("SHOPCART_SIMPLE_INFO");
			List<ProductVO> shopcart_particular = (List<ProductVO>) request.getSession(false).getAttribute("SHOPCART_PARTICULAR");
			Map<String, String> chargeList = (Map<String, String>) request.getSession(false).getAttribute("CHARGE_LIST");
			Map<String, AddressVO> addrMap = (Map<String, AddressVO>) request.getSession(false).getAttribute("ADDR_MAP");
			//根据以上存放在session中的属性变量,生成一个BuyDTO,把这个buyDTO传递给service层
			
			BuyDTO buyDTO = new BuyDTO();
			buyDTO.setConfiguration(shopcart_map);
			buyDTO.setItems(shopcart_simple_info);
			buyDTO.setProductList(shopcart_particular);
			buyDTO.setChargeList(chargeList);
			buyDTO.setAddrs(addrMap);
			
			flag = trade_service.buy(buyDTO);
		}
		if(!flag){
			return mapping.findForward("buy_fail");//返回给用户购买失败的提示信息
		}else{
			//这时要清理购物车了,以便该用户还要继续购物的话,那么就购物车里就还有上次购物选择的商品
			Map<Integer, Integer> shopcart_simple_info = (Map<Integer, Integer>) request.getSession(false).getAttribute("SHOPCART_SIMPLE_INFO");
			List<ProductVO> shopcart_particular = (List<ProductVO>) request.getSession(false).getAttribute("SHOPCART_PARTICULAR");
			Map<String, String> chargeList = (Map<String, String>) request.getSession(false).getAttribute("CHARGE_LIST");
			request.getSession(false).removeAttribute("SHOPCART_MAP");
			shopcart_simple_info.clear();
			shopcart_particular.clear();
			chargeList.clear();
		}
		
		return mapping.findForward("buy_succeed"); //返回给用户购买成功的提示信息
	}
	/**
	 * 立即购买方法
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward immedBuy(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		Integer productid = Integer.parseInt(request.getParameter("productid"));
		Integer num = 1; //默认第一次只选一个
		
		HttpSession session = request.getSession();
		if(session.getAttribute("SHOPCART_SIMPLE_INFO") == null){
			Map<Integer, Integer> shopcart = new HashMap<Integer, Integer>(); //一个为商品id,一个为购买数量
			session.setAttribute("SHOPCART_SIMPLE_INFO", shopcart);
			/*List<ProductVO> shopcart_particular = new ArrayList<ProductVO>();
			session.setAttribute("SHOPCART_PARTICULAR", shopcart_particular);*/
		}
		Map<Integer, Integer> shopcart_simple_info = (Map<Integer, Integer>) request.getSession(false).getAttribute("SHOPCART_SIMPLE_INFO");
		Set<Integer> idset = shopcart_simple_info.keySet();
		if(!idset.contains(productid)){
			shopcart_simple_info.put(productid, num);
		}else{}//如果用户已经把该件商品添加到购物车了,那么就什么也不做修改
		
		return new ActionForward("/buy/myshopcart.do"); //转到viewshopcart方法,在那个方法时会到数据库中查询产品的详细信息,再转到页面进行显示
	}
	/** 
	 * Method buy
	 * 添加一个商品到购物车 step1 如果购物车还未激活,则会激活购物车
	 * 我还应该写一个批量选择商品放入购物车的方法,那么
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * 
	 * 这个方法是供用户异步调用的
	 * 
	 * 我应该对购买商品这个业务流程加一个filter,以确保当前的会话session因为超时而被服务器destory掉,
	 * 这样就获取不到session,从而会出异常
	 */
	@SuppressWarnings("unchecked")
	public ActionForward add_product(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer productid = Integer.parseInt(request.getParameter("productid"));
		Integer num = 1; //默认只选一个
		
		HttpSession session = request.getSession();
		if(session.getAttribute("SHOPCART_SIMPLE_INFO") == null){
			Map<Integer, Integer> shopcart = new HashMap<Integer, Integer>(); //一个为商品id,一个为购买数量
			session.setAttribute("SHOPCART_SIMPLE_INFO", shopcart);
			List<ProductVO> shopcart_particular = new ArrayList<ProductVO>();
			session.setAttribute("SHOPCART_PARTICULAR", shopcart_particular);
		}
		Map<Integer, Integer> shopcart_simple_info = (Map<Integer, Integer>) request.getSession(false).getAttribute("SHOPCART");
		shopcart_simple_info.put(productid, num);
		
		return null;
	}
	/**
	 * 这个方法也是供用户异步调用的,不返回给用户结果,用户界面的改变是通过js实现
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward buystep_modify(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Map<Integer, Integer> shopcart_simple_info = (Map<Integer, Integer>) request.getSession(false).getAttribute("SHOPCART");
		shopcart_simple_info.put(Integer.parseInt(request.getParameter("productid")), Integer.parseInt(request.getParameter("num"))); //覆盖原来的数量
		
		return null;
	}
	/**
	 * 这个方法也是供用户异步调用的,不返回给用户结果,用户界面的改变是通过js实现,
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward buystep_delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		Map<Integer, Integer> shopcart_simple_info = (Map<Integer, Integer>) request.getSession(false).getAttribute("SHOPCART");
		shopcart_simple_info.remove(Integer.parseInt(request.getParameter("productid"))); //对引用的修改同样会使原来变量也会修改
		
		return null;
	}
	/*@SuppressWarnings("unchecked")
	public ActionForward confirmAddr(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String addr_selected = request.getParameter("addr");
		Map<String, AddressVO> addrMap = (Map<String, AddressVO>) request.getSession(false).getAttribute("ADDR_MAP");
		if(addrMap.size() == 0){
			return mapping.findForward("fillInAddr$");
		}
		Set<String> addrKeyset = addrMap.keySet();
		Iterator<String> iter = addrKeyset.iterator();
		String addrkey = null;
		while(iter.hasNext()){
			String key = iter.next();
			if(key.equals(addr_selected)){
				addrkey = key;
				break;
			}
		}
		request.getSession(false).setAttribute("ADDR_KEY", addrkey);
		
		return mapping.findForward("buystep");
	}*/
	/*public ActionForward endConfirm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		BeanFactory beanFactory = BeanFactory.getInstance(null);
		//在这里把存放在session中的所有购买需信息全部返回给用户,生成一个清单,供用户确认
		ActionForward forward = mapping.findForward("orderlist$");
		String isUseBonouspoint = request.getParameter("isubp");
		Integer usebonouspoint = 0;
		if(isUseBonouspoint.equals("yes") && !request.getParameter("bp").equals("")){
			((Map<String, Object>)request.getSession(false).getAttribute("SHOPCART_MAP")).put("IS_USE_BONUSPOINT", true);
			usebonouspoint = Integer.parseInt(request.getParameter("bp")); //看用户是否用积分,如果用积分,用多少积分
		}else{
			return forward;
		}
		TradeService trade_service = (TradeService) beanFactory.getBean("TradeService");
		List<ProductVO> shopcart_particular = (List<ProductVO>) request.getSession(false).getAttribute("SHOPCART_PARTICULAR");
		Map<String, String> chargelist = (Map<String, String>) request.getSession(false).getAttribute("CHARGE_LIST");
		if(isUseBonouspoint.equals("yes")) {
			chargelist = trade_service.calcOrder(shopcart_particular, usebonouspoint);
		} else {
			chargelist = trade_service.calcOrder(shopcart_particular);
		}
		chargelist = trade_service.calcOrder(shopcart_particular);
		
//		((Map<String, Object>)request.getSession(false).getAttribute("SHOPCART_MAP")).put("IS_USE_BONUSPOINT", false);
//		request.getSession(false).setAttribute("IS_USE_BONUSPOINT", false);
		request.getSession(false).setAttribute("CHARGE_LIST", chargelist);
		
		return forward;
	}*/
//============================End==============End=================End========================================
	/**
	 * 收藏商品
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward collect(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BeanFactory beanFactory = BeanFactory.getInstance(null);
		Integer productid = Integer.parseInt(request.getParameter("productid"));
		TradeService service = (TradeService) beanFactory.getBean("TradeService");
		service.setDAO(beanFactory);
		
		boolean flag = service.collect(productid);
		ActionForward forward = null;
		if(flag){
			forward = mapping.getInputForward();
		}else {
			forward = mapping.findForward("errorCollect");
		}
		return forward;
	}
	/**
	 * 意愿一些商品
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward wish(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		BeanFactory beanFactory = BeanFactory.getInstance(null);
		Integer productid = Integer.parseInt(request.getParameter("productid"));
		TradeService service = (TradeService) beanFactory.getBean("TradeService");
		service.setDAO(beanFactory);
		boolean flag = service.collect(productid);
		ActionForward forward = null;
		if(flag){
			forward = mapping.getInputForward();
		}else {
			forward = mapping.findForward("errorWish");
		}
		return forward;
	}
}