/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package mil.yaye.yours.control.action;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.util.Enumeration;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import mil.yaye.yours.common.BaseAction;
import mil.yaye.yours.dto.AddressDTO;
import mil.yaye.yours.dto.LogonDTO;
import mil.yaye.yours.dto.RegistDTO;
import mil.yaye.yours.factory.BeanFactory;
import mil.yaye.yours.service.PersonnelService;
import mil.yaye.yours.vo.AccountVO;
import mil.yaye.yours.vo.AddressVO;
import mil.yaye.yours.vo.UserVO;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.validator.DynaValidatorActionForm;
import org.apache.struts.validator.DynaValidatorForm;


/** 
 * 
 * MyEclipse Struts
 * Creation date: 12-02-2008
 * 
 * XDoclet definition:
 * @struts.action path="/personnel" name="personnelForm" input="/personnel.jsp" parameter="method" scope="request" validate="true"
 */
public class PersonnelAction extends BaseAction {
	
			/**********这里相当于人事部<Personnel>**********/
	
	// Fields
	private static Logger logger = Logger.getLogger(PersonnelAction.class.getName());
	
	private BeanFactory beanFactory = BeanFactory.getInstance(null);
	
	/*
	 * Generated Methods
	 */

	/** 
	 * Method regist
	 * 注册时使用Action的令牌机制进行预处理
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward regist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		logger.info("走到这里来了.........1......");
		if(isCancelled(request)){ //如果点击'取消'
			return mapping.findForward("index");
		}else{
			ActionMessages registErrors = new ActionMessages();
			Enumeration<?> attrs = request.getSession(false).getAttributeNames();
			while(attrs.hasMoreElements()){
				Object attr = attrs.nextElement();
				logger.info("在regist.do方法时Token令牌为:" + request.getSession(false).getAttribute((String)attr));
			}
//			if(!isTokenValid(request)){ //If Anew
			if(isTokenValid(request)){ //If Anew
				//Put an New Token
				saveToken(request);
				logger.info("走到这里来了.........3......");
				registErrors.add("tokenerrors",new ActionMessage("login.token"));
				saveMessages(request, registErrors);
				return mapping.findForward("regist$");
			}else{ //If First
				//Delete the Token
				resetToken(request);
				DynaValidatorForm registForm = (DynaValidatorForm) form;
				String validateCode = null;
				boolean isvc = true;
				if(request.getSession(false) == null){
					return mapping.findForward("");
				}
				validateCode = (String) request.getSession(false).getAttribute("validatecode");
				if(validateCode == null ){
					logger.info("validateCode为空............");
				}else{
					logger.info("validateCode为:" + validateCode);
				}
				//清除当前Session
				request.getSession(false).invalidate(); //及时清除这个session,同样也会触发DestorySessionListener这个Listener,但不会再执行什么操作.
//				isvc = validateCode.equals(registForm.get("validatecode"));
				isvc = validateCode.equalsIgnoreCase(registForm.getString("validatecode"));
				logger.info("当前的验证码为:"+ validateCode);
				if(!isvc){
					ActionMessages errors = new ActionMessages();
					errors.add("MY_RESPONSE_ERROR", new ActionMessage("×验证码错误！"));
					saveMessages(request, errors);
					return mapping.findForward("regist$");
				}
				RegistDTO registDTO = new RegistDTO();
				try {
					BeanUtils.copyProperties(registDTO, registForm);
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
				PersonnelService service = (PersonnelService) beanFactory.getBean("PersonnelService");
//				service.regist(userDTO, addrDTO);
				service.regist(registDTO);
				
//				request.getSession(true).setAttribute("CURRENT_USER_ID", id);
				return mapping.findForward("regist_succeed");
			}
		}
	}

	/** 
	 * Method 单点登陆方法
	 * 
	 * 只允许单点登陆
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception
	 */
	public ActionForward logon(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DynaValidatorActionForm logonForm = (DynaValidatorActionForm) form;
		PersonnelService service = (PersonnelService) beanFactory.getBean("PersonnelService");
		if(request.getSession(false) != null){
			if(request.getSession(false).getAttribute("IS_LOGON") != null && (((Boolean)request.getSession(false).getAttribute("IS_LOGON")) == true)){
				request.setAttribute("MY_RESPONSE_ERROR", "×对不起,已存在一个这样的帐户登陆!");
				return mapping.findForward("logon$");
			}else {
				request.getSession(false).invalidate();
			}
		}
		ActionForward forward = mapping.findForward("logon$");
		LogonDTO logonDTO = new LogonDTO();
		BeanUtils.copyProperties(logonDTO, logonForm);
		if(logonDTO == null){
		}
		boolean passTocheck = true;
		if(passTocheck) {
			switch (service.loginCheck(logonDTO))
			{
				case 0 :	//我自己设定的状态码,当不用validator框架时就可以用到此功能,此代表"用户名或密码错误",在客户端用js根据这个状态码来显示错误信息
					request.setAttribute("MY_RESPONSE_ERROR", "×用户名或密码错误！");
					break;
				case 4 :
					logger.info("是不是走到这里来了...........");
					request.setAttribute("MY_RESPONSE_ERROR", "×用户名或密码错误！");
					break;
				case 11 : //我自己设定的状态码,此代表"已经存在一个这样的帐户登陆",在客户端用js根据这个状态码来显示错误信息
//					request.setAttribute("MY_RESPONSE_CODE", "157011");
					request.setAttribute("MY_RESPONSE_ERROR", "×对不起,已存在一个这样的帐户登陆!");
					break;
				case 7 : //检查正常,成功登陆
					if(request.getSession(false) != null){	request.getSession(false).invalidate();	}
					logger.info("已经在这里开启一个会话了.......");
					HttpSession session = request.getSession();
					session.setAttribute("IS_LOGON", true);
					UserVO userInfo = service.getInfo(logonDTO.getLogonid(), session.getId());
					session.setAttribute("USER_BASE_INFO", userInfo);
					Cookie LOGONID = new Cookie("LOGONID", userInfo.getLogonid());
					
					LOGONID.setMaxAge(-1);
					response.addCookie(LOGONID);
					forward = mapping.findForward("index"); //forward到index.html页面
					break;
				default : ;//这一条件除非是service层有异常,否则就不可能到达,因为调用service的这个方法,有一个默认的值:0
			}
		}
		//标签的使用
		/*check : switch (service.loginCheck(loginVO))
		{
			case 0 :	//我自己设定的状态码,此代表"用户名或密码错误",在客户端用js根据这个状态码来显示错误信息
				request.setAttribute("MY_RESPONSE_CODE", "157000");
				break;
			case 4 :
				request.setAttribute("MY_RESPONSE_CODE", "157004");
				break;
			case 11 : //我自己设定的状态码,此代表"用户名或密码错误",在客户端用js根据这个状态码来显示错误信息
				request.setAttribute("MY_RESPONSE_CODE", "157011");
				//forward = mapping.findForward("ValidateCode.do");
				break;
			case 7 : //检查正常,成功登陆
				forward = mapping.findForward("index_"); //forward到index.jsp页面
				break;
			default :
				forward = mapping.findForward("logon"); //forward到
		}*/
		return forward;
	}
	/**
	 * Method 单点登陆方法
	 * 
	 * 只允许单点登陆
	 * 
	 * 这个登陆方法需要进行验证码验证
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward valcLogon(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DynaValidatorActionForm valcLogonForm = (DynaValidatorActionForm) form;
		PersonnelService service = (PersonnelService) beanFactory.getBean("PersonnelService");
		String validateCode = null;
		boolean isvc = true;
		ActionForward forward = mapping.findForward("logon$"); //
		LogonDTO valcLogonDTO = new LogonDTO();
		BeanUtils.copyProperties(valcLogonDTO, valcLogonForm);
		logger.info("表单提交的验证码为:..."+valcLogonDTO.getValidatecode());
		if(request.getSession(false) != null){
			validateCode = (String) request.getSession(false).getAttribute("validatecode");
			request.getSession(false).invalidate(); //及时清除这个session,同样也会触发DestorySessionListener这个Listener,但不会再执行什么操作.
			isvc = validateCode.equalsIgnoreCase(valcLogonDTO.getValidatecode());
			logger.info("当前的验证码为:"+ validateCode);
		}
		boolean passTocheck = true;
		if(isvc == false){	//我自己设定的状态码,此代表"验证码密码",在客户端用js根据这个状态码来显示错误信息
			passTocheck = false;
//			request.setAttribute("MY_RESPONSE_CODE", "157003");
			request.setAttribute("MY_RESPONSE_ERROR", "×验证码错误！");
		}
		if(passTocheck) {
			logger.info("验证码已经检查相同,已正确.......");
			switch (service.loginCheck(valcLogonDTO))
			{
				case 0 :	//我自己设定的状态码,此代表"用户名或密码错误",在客户端用js根据这个状态码来显示错误信息
	//				request.setAttribute("MY_RESPONSE_CODE", "157000");
					request.setAttribute("MY_RESPONSE_ERROR", "×用户名或密码错误！");
					break;
				case 4 :
	//				request.setAttribute("MY_RESPONSE_CODE", "157004");
					logger.info("是不是走到这里来了...........");
					request.setAttribute("MY_RESPONSE_ERROR", "×用户名或密码错误！");
					break;
				case 11 : //我自己设定的状态码,此代表"已经存在一个这样的帐户登陆",在客户端用js根据这个状态码来显示错误信息
	//				request.setAttribute("MY_RESPONSE_CODE", "157011");
					request.setAttribute("MY_RESPONSE_ERROR", "×对不起,已存在一个这样的帐户登陆!");
					//forward = mapping.findForward("ValidateCode.do");
	//				forward = mapping.findForward("logon$");
					break;
				case 7 : //检查正常,成功登陆
					if(request.getSession(false) != null){	request.getSession(false).invalidate();	}
					logger.info("已经在这里开启一个会话了.......");
					HttpSession session = request.getSession(true);
					session.setAttribute("IS_LOGON", true);
					UserVO userInfo = service.getInfo(valcLogonDTO.getLogonid(), session.getId());
					session.setAttribute("USER_BASE_INFO", userInfo);
					Cookie LOGONID = new Cookie("LOGONID", userInfo.getLogonid());
					LOGONID.setMaxAge(-1);
					response.addCookie(LOGONID);
					forward = mapping.findForward("index"); //forward到index.html页面
					break;
				default : ;//这一条件除非是service层有异常,否则就不可能到达,因为调用service的这个方法,有一个默认的值:0
			}
		}
		return forward;
	}
	
	/**
	 * 安全退出 logon off
	 * 
	 * 1.不仅清除服务器端的session
	 * 2.而且也清除客户端的Cookie
	 * 3.还需要修改数据库中的登陆标识字段
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward exit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		String logonid = null;
		try {
			logonid = new String(request.getParameter("id").getBytes(), "utf-8");
			logger.info("获取的logonid为:......" + logonid);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
//		logger.info("URL参数编码方式为:.." + request.getCharacterEncoding());
		request.getSession(false).invalidate(); //1.清除服务器端的session
		//还需要修改数据库中的登陆标识字段
		PersonnelService service = (PersonnelService) beanFactory.getBean("PersonnelService");
		
		Cookie[] cookies = request.getCookies(); //2.清除客户端的Cookie,以达到客户端不用等到关闭浏览器就能清除Cookie了
		if(cookies != null){
			for(int i = 0; i < cookies.length; i++){
				Cookie cookie = new Cookie(cookies[i].getName(),"");
				cookie.setMaxAge(0);
				response.addCookie(cookie);
			}
		}
		logger.info("开始执行exit方法........");
//		service.exit(logonid);
		service.exitByJDBC(logonid);
		logger.info("执行结束exit方法........");
//		service.exitByJDBC(1);	//3.修改数据库中的登陆标识字段为'off'
		return mapping.findForward("index");
	}
	public ActionForward exitByListener(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		
		if(request.getSession(false) != null){
			request.getSession(false).invalidate(); //1.清除服务器端的session, 会触发一个sessionListener监听器
		}
		Cookie[] cookies = request.getCookies(); //2.清除客户端的Cookie,以达到客户端不用等到关闭浏览器就能清除Cookie了
		if(cookies != null){
			for(int i = 0; i < cookies.length; i++){
				Cookie cookie = cookies[i];
				logger.info("所有的Cookie为:..." + cookies[i].getName());
				cookie.setMaxAge(0);
				response.addCookie(cookie);
			}
		}
		return mapping.findForward("index");
	}
	/**
	 * 增加一个地址,供用户购买商品时选择其中的地址
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward addOneAddr(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		DynaValidatorForm receiveAddrForm = (DynaValidatorForm) form;
		AddressDTO addrDTO = new AddressDTO();
		addrDTO.setAddrname("Addr");
		addrDTO.setRealname(receiveAddrForm.getString("consignee"));
		addrDTO.setCountry(receiveAddrForm.getString("country"));
		addrDTO.setProvince(receiveAddrForm.getString("province"));
		addrDTO.setCity(receiveAddrForm.getString("city"));
		addrDTO.setSelfaddress(receiveAddrForm.getString("selfaddr"));
		addrDTO.setZipcode(receiveAddrForm.getString("zipcode"));
		addrDTO.setZipcode(receiveAddrForm.getString("tel"));
		addrDTO.setZipcode(receiveAddrForm.getString("mobile"));
		
		PersonnelService personnel_service = (PersonnelService) beanFactory.getBean("PersonnelService");
		Integer addrId = personnel_service.addOneAddr(addrDTO, ((UserVO)request.getSession(false).getAttribute("USER_BASE_INFO")).getUserId());
		//*此为途径一:<再一次查询数据库>
		Map<String, AddressVO> addrMap = personnel_service.getAddrs(((UserVO)request.getSession(false).getAttribute("USER_BASE_INFO")).getUserId());
		request.getSession(false).setAttribute("ADDR_MAP", addrMap);
		
		/*//*此为途径二:<未再查询数据库>
		Map<String, AddressVO> addrMap = new HashMap<String, AddressVO>();
		AddressVO addrVO = new AddressVO();
		try {
			BeanUtils.copyProperties(addrVO, addrDTO);
			addrVO.setAddressId(addrId);
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
		addrMap.put("ADDR_" + addrId, addrVO);*/
		
		request.getSession(false).setAttribute("ADDR_KEY", "ADDR_" + addrId);
		
		return mapping.findForward("endConfirm$");
	}
	/**
	 * 查看个人帐户信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward myAccout(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		ActionForward forward = null;
		/*if(request.getSession(false) == null){ //这个就不用在这里判断了,因为我已经用过滤器过滤了
			request.setAttribute("MY_RESPONSE_ERROR", "×对不起,您还没有登陆!请先登陆!");
			return mapping.findForward("logon");
		}*/
		String logonid = ((UserVO) request.getSession(false).getAttribute("USER_BASE_INFO")).getLogonid();
		PersonnelService service = (PersonnelService) beanFactory.getBean("PersonnelService");
		AccountVO account = service.myAccount(logonid);
		request.setAttribute("ACCOUT", account);
		return mapping.findForward("accout");
	}
	
}