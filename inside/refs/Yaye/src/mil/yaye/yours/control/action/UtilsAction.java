/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package mil.yaye.yours.control.action;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.MappingDispatchAction;

/** 
 * MyEclipse Struts
 * Creation date: 12-03-2008
 * 
 * XDoclet definition:
 * @struts.action parameter="method" validate="true"
 */
public class UtilsAction extends MappingDispatchAction {
	
	
	private Logger logger = Logger.getLogger(UtilsAction.class.getName());
	
	/*
	 * Generated Methods
	 */

	/** 
	 * 用来专门生成验证码
	 * Method ValidateCode
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward ValidateCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		response.reset();
		response.setContentType("image/png");
		response.setHeader("Cache-Control", "no-cache");
		int rx0 = 0, ry0 = 0;
		int rx1 = 90, ry1 = 30;
		BufferedImage image = new BufferedImage(90,30,BufferedImage.TYPE_INT_RGB);
		Graphics grap = image.getGraphics();
		grap.setColor(this.getRandColor(230,250));
		grap.fillRect(rx0, ry0, rx1, ry1);
		//干扰线
		Random rand = new Random();
		for(int i = 0; i<200; i++) {
			grap.setColor(this.getRandColor(150, 210));
			int x0 = rand.nextInt(rx1);
			int y0 = rand.nextInt(ry1);
			int x1 = rand.nextInt(rx1);
			int y1 = rand.nextInt(ry1);
			grap.drawLine(x0, y0, x1, y1);
		}
		int amount = 4; 
		grap.setFont(new Font("Times New Roman", Font.BOLD, 24));
		StringBuffer code = new StringBuffer();
		logger.info("开始生成验证码了..........");
		int total = 0;
		for(int i = 0; i < amount; i++) {
			grap.setColor(this.getRandColor(50, 150));
			int num = getCode();
			if(!(num > -1 && num < 10)){
				grap.drawString((char) num + "", 22*i+6, 20+new Random().nextInt(5)); //Y:24
//				logger.info("这个字符型的验证码的int型为:" + num);
//				logger.info("生成一个字符型的验证码,为:" + ((char) num));
				code.append((char) num);
			}else {
//				logger.info("生成一个int型的验证码,为:" + num);
				grap.drawString(String.valueOf(num), 22*i+6, 20+new Random().nextInt(5)); //Y:24
				code.append(num);
			}
			total++;
		}
		try {
			//保存到当前session中,这时就不得不打开一个session了
			request.getSession().setAttribute("validatecode", code.toString());
			logger.info("UtilsAction ....session中存放的验证码字符串为:" + request.getSession(false).getAttribute("validatecode"));
			ServletOutputStream out = response.getOutputStream();
			ImageIO.write(image, "PNG", out);
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	private Color getRandColor(int low, int high){
		Random rand = new Random();
		int r = low + rand.nextInt(high - low);
		int g = low + rand.nextInt(high - low);
		int b = low + rand.nextInt(high - low);
		
		return new Color(r, g, b);
	}
	
	private int getCode(){
		/*
		 * 0 : 0-9
		 * 1 : a-z
		 * 2 : A-Z
		 */
		Random rand = new Random();
		int code = 0;
		int flag = rand.nextInt(3);
		switch (flag)
		{
			case 0 :
				code = rand.nextInt(10);
				break;
			case 1 :
				code = getCodeByScope('a', 'z');
				break;
			case 2 :
				code = getCodeByScope('A','Z');
				break;
		}
		return code;
	}
	
	private int getCodeByScope(int low, int high){
		Random rand = new Random();
		return low + rand.nextInt(high - low);
	}
}