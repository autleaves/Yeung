/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package mil.yaye.yours.control.action;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import mil.yaye.yours.common.Constants;
import mil.yaye.yours.common.GlobalNames;
import mil.yaye.yours.factory.BeanFactory;
import mil.yaye.yours.service.GuideService;
import mil.yaye.yours.util.PageHelper;
import mil.yaye.yours.util.PaginateDTO;
import mil.yaye.yours.vo.InitVO;
import mil.yaye.yours.vo.ProductVO;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.MappingDispatchAction;

/** 
 * MyEclipse Struts
 * Creation date: 03-23-2009
 * 
 * XDoclet definition:
 * @struts.action input="viewproduct.do" parameter="method"
 */
public class GuideAction extends MappingDispatchAction {
	
	//Fields
	private static Logger logger = Logger.getLogger(GuideAction.class.getName());
	
	private StringBuffer templethtml = null;
	private BeanFactory serviceFactory = BeanFactory.getInstance(null);
	/*
	 * Generated Methods
	 */
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward viewproduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String productid = request.getParameter("productid");
		//<---调用相应业务模型 begin
		GuideService service = (GuideService)serviceFactory.getBean("GuideService");
		ProductVO productVO = service.productGuide(Integer.parseInt(productid));
		if(productVO == null){
			return mapping.findForward("index");
		}
		Map<Integer, InitVO> locationMap = service.getLocations(productVO.getCategory().getCategoryId());//--End
		
		//<---读入模板页面 begin
		/*这可以不用在这里再写出了,因为我在struts的配置文件中为ActionServlet<中央控制器>配置的一个<controller>元素中指出了
		两个属性的值:contentType和nocache
		<controller
		contentType="text/html;charset=utf-8"
		locale="false"
		nocache="true"
		  />*/
		//response.setCharacterEncoding("utf-8");
		String path = this.getServlet().getServletContext().getRealPath("/");
		path += "/product.html";
		File file = new File(path);
		templethtml = new StringBuffer();
		try {
			FileReader input = new FileReader(file);
		    BufferedReader br = new BufferedReader(input);
		    String temp = "";
			while((temp = br.readLine()) != null) {
				templethtml.append(temp + "\n");
			}
			br.close();
			input.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}//End--->
		
		//<--构造该商品的n+1父级目录的每个目录的链接 begin
		StringBuffer strBuff = new StringBuffer();
		String snip_1 = "<a href='" + GlobalNames.SERVER + "/category.do?categoryid=";
		String snip_2 = "'>";
		String snip_3 = "</a>&nbsp;&gt;&nbsp;";
//		logger.info("locationMap的大小为:" + locationMap.size());
		for(int i = locationMap.size() -1; i > 0; i--){
			InitVO initVO = locationMap.get(i);
			strBuff.append(snip_1 + initVO.getKey() + snip_2 + initVO.getValue() + snip_3);
//			logger.info("几个目录链接:" + snip_1 + initVO.getKey() + snip_2 + initVO.getValue() + snip_3);
//			logger.info("生成了几个<a></a>" + i);
		}
		strBuff.append(snip_1 + productVO.getCategory().getCategoryId() + snip_2 + productVO.getCategory().getCategoryname() + snip_3);
		
		//---End
		
		//<--开始对模板页上的相关内容进行准备 begin
		String title = productVO.getProductname() + " -RedRose商城";
		String image = "<img src='" + GlobalNames.SERVER + "/" +productVO.getThumbnail() + "' width='170' height='170' />";
//		logger.info("图像的路径为:"+image);
		String productname = productVO.getProductname();
		String market_price = "2980";
		String our_price = productVO.getPrice().toString();
		String description = productVO.getDescription();
		String locations = strBuff.toString(); //---End
		/*for Test
		 * String image = "<img src='" + GlobalNames.SERVER + "images/products/thirdviewimages/PD_2010729_M.jpg' width='170' height='170' />";
		String productname = "【日本·LIZ LISA】甜美公主袖女士罩衫（桔色）";
		String market_price = "2980";
		String our_price = "2350.00";
		String description = "尺码:均码颜色:桔色花色:纯色风格:淑女着装方案:标准适合季节:春|夏|秋|冬素材：聚酯65% 人造纤维30% 聚氨乙酯5%クリーニング：石油系ドライクリーニング原産国：中国制尺寸胸围腰围总袖长身长F84cmFree 75cm66cm";
		String locate1 = "数码视听、相机、摄影摄像";
		String locate2 = "MP4";
		String locate3 = "ipod苹果";*/
		
		//<--开始对模板页上的相关内容进行替换 begin
		String output = templethtml.toString();
		output = output.replace("%title%", title);
		output = output.replaceAll("%SERVER%", GlobalNames.SERVER);
		output = output.replaceAll("%product_image%", image);
		output = output.replaceAll("%locations%", locations);
		output = output.replaceAll("%productname%", productname);
		output = output.replaceAll("%market_price%", market_price);
		output = output.replaceAll("%our_price%", our_price);
		output = output.replaceAll("%productid%", productVO.getProductId().toString());
		output = output.replaceAll("%product_description%", description);
		//---End
		try {
//			ServletOutputStream out = response.getOutputStream();
			PrintWriter out = response.getWriter();
			out.print(output);
			out.flush();
			out.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		logger.info("完成一次查询...over...............!!!!!!!");
//		logger.info(output);
		return null;
	}
	/**
	 * 登陆后查看商品
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward viewproduct_(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		/*Cookie[] cookies = request.getCookies();
		if(cookies == null){
			return mapping.findForward("");
		}
		for(int i = 0; i < cookies.length; i++){
			if(cookies[i].getName().equals("JSESSIONID")){
				logger.info("当前会话的sessionID为:" + cookies[i].getValue());
			}
		}*/
		String productid = request.getParameter("productid");
		//<---调用相应业务模型 begin
		GuideService service = (GuideService)serviceFactory.getBean("GuideService");
		ProductVO productVO = service.productGuide(Integer.parseInt(productid));
		if(productVO == null){
			return mapping.findForward("index");
		}
		Map<Integer, InitVO> catalogMap = service.getLocations(productVO.getCategory().getCategoryId());//--End
		
		request.setAttribute("productVO", productVO);
		request.setAttribute("catalogMap", catalogMap);
		
		return mapping.findForward("product$");
	}
	/**
	 * 这个方法进行查询数据库的scott.emp表
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward proxoolcheck(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		//<---调用相应业务模型 begin
		GuideService service = (GuideService)serviceFactory.getBean("GuideService");
		service.proxoolcheck();
		return null;
	}
	public ActionForward categoryGuide_(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Integer categoryId = Integer.parseInt(request.getParameter("categoryid"));
		String pageStr = request.getParameter("page");
		Integer page = (pageStr == null) ? 1 : Integer.parseInt(pageStr);
		Integer size = (request.getParameter("size") != null ? Integer.parseInt(request.getParameter("size")) : Constants.PAGE_SIZE);
		GuideService service = (GuideService) serviceFactory.getBean("GuideService");
		PaginateDTO paginateDTO = new PaginateDTO();
		paginateDTO.setIndex((page - 1) * Constants.PAGE_SIZE);
		paginateDTO.setSize(size);
		
		Map<String, Object> result = service.categoryGuide(categoryId, paginateDTO);
		if(result == null){
			return mapping.findForward("");
		}
		int totalRecord = (Integer) result.get("totalRecord");
		List<ProductVO> productlist = (List<ProductVO>) result.get("productlist");
		PageHelper pageHelper = new PageHelper(page,size,totalRecord, Constants.PAGINATE_BAR_SIZE);
		pageHelper.addParameter("categoryId", categoryId);
		pageHelper.addParameter("keyword","");
		pageHelper.addParameter("category","");
		
		request.setAttribute("productlist", productlist);
		request.setAttribute("pageHelper", pageHelper);
		
		return mapping.findForward("secondlist$");
	}
}